// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: auth.sql

package sqlgen

import (
	"context"
	"database/sql"
)

const checkPasswordAccount = `-- name: CheckPasswordAccount :one
SELECT id, priviledge_type, family_id 
FROM account 
WHERE password_hash = ? AND email = ?
LIMIT 1
`

type CheckPasswordAccountParams struct {
	PasswordHash string
	Email        string
}

type CheckPasswordAccountRow struct {
	ID             int64
	PriviledgeType string
	FamilyID       sql.NullInt64
}

func (q *Queries) CheckPasswordAccount(ctx context.Context, arg CheckPasswordAccountParams) (CheckPasswordAccountRow, error) {
	row := q.db.QueryRowContext(ctx, checkPasswordAccount, arg.PasswordHash, arg.Email)
	var i CheckPasswordAccountRow
	err := row.Scan(&i.ID, &i.PriviledgeType, &i.FamilyID)
	return i, err
}

const createSessionToken = `-- name: CreateSessionToken :one
INSERT INTO session (token,expiration_datetime,account_id) VALUES (?,
    datetime(
        'now',
        '+' || ? || ' days',
        '+' || ? || ' hours',
        '+' || ? || ' minutes'
    ),?)
RETURNING id, token, expiration_datetime, account_id
`

type CreateSessionTokenParams struct {
	Token     string
	Days      sql.NullString
	Hours     sql.NullString
	Minute    sql.NullString
	AccountID int64
}

func (q *Queries) CreateSessionToken(ctx context.Context, arg CreateSessionTokenParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSessionToken,
		arg.Token,
		arg.Days,
		arg.Hours,
		arg.Minute,
		arg.AccountID,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.ExpirationDatetime,
		&i.AccountID,
	)
	return i, err
}

const publiclyUnaliveTokens = `-- name: PubliclyUnaliveTokens :exec
DELETE FROM session 
WHERE session.expiration_datetime <= datetime('now')
`

func (q *Queries) PubliclyUnaliveTokens(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, publiclyUnaliveTokens)
	return err
}

const unsafeCreateAccount = `-- name: UnsafeCreateAccount :one

INSERT INTO account 
	(email,password_hash, priviledge_type,last_updated) 
VALUES 
	(?,?,?,datetime('now')) 
RETURNING id, email, password_hash, priviledge_type, last_updated, family_id
`

type UnsafeCreateAccountParams struct {
	Email          string
	PasswordHash   string
	PriviledgeType string
}

// AND session.expiration_datetime>datetime('now');
func (q *Queries) UnsafeCreateAccount(ctx context.Context, arg UnsafeCreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, unsafeCreateAccount, arg.Email, arg.PasswordHash, arg.PriviledgeType)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.PriviledgeType,
		&i.LastUpdated,
		&i.FamilyID,
	)
	return i, err
}

const validateSessionToken = `-- name: ValidateSessionToken :one
;

SELECT account.id, account.priviledge_type FROM session
INNER JOIN account
ON account.id = session.account_id
WHERE session.token = ?
`

type ValidateSessionTokenRow struct {
	ID             int64
	PriviledgeType string
}

func (q *Queries) ValidateSessionToken(ctx context.Context, token string) (ValidateSessionTokenRow, error) {
	row := q.db.QueryRowContext(ctx, validateSessionToken, token)
	var i ValidateSessionTokenRow
	err := row.Scan(&i.ID, &i.PriviledgeType)
	return i, err
}
