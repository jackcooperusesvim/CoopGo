// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: auth.sql

package sqlgen

import (
	"context"
	"database/sql"
)

const createSessionToken = `-- name: CreateSessionToken :one
INSERT INTO session (token,expiration_datetime,account_id) VALUES (?,
    datetime(
        'now',
        '+' || ? || ' days',
        '+' || ? || ' hours',
        '+' || ? || ' minutes'
    ),?)
RETURNING id, token, expiration_datetime, account_id
`

type CreateSessionTokenParams struct {
	Token     string
	Days      sql.NullString
	Hours     sql.NullString
	Minute    sql.NullString
	AccountID int64
}

func (q *Queries) CreateSessionToken(ctx context.Context, arg CreateSessionTokenParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSessionToken,
		arg.Token,
		arg.Days,
		arg.Hours,
		arg.Minute,
		arg.AccountID,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.ExpirationDatetime,
		&i.AccountID,
	)
	return i, err
}

const getAccountInfo = `-- name: GetAccountInfo :one
SELECT id, priviledge_type, password_hash
FROM account
WHERE email = ?
LIMIT 1
`

type GetAccountInfoRow struct {
	ID             int64
	PriviledgeType string
	PasswordHash   string
}

func (q *Queries) GetAccountInfo(ctx context.Context, email string) (GetAccountInfoRow, error) {
	row := q.db.QueryRowContext(ctx, getAccountInfo, email)
	var i GetAccountInfoRow
	err := row.Scan(&i.ID, &i.PriviledgeType, &i.PasswordHash)
	return i, err
}

const getSessionTokens = `-- name: GetSessionTokens :many
SELECT account.id, account.priviledge_type, session.token FROM session
INNER JOIN account
ON account.id = session.account_id
WHERE session.expiration_datetime>datetime('now')
`

type GetSessionTokensRow struct {
	ID             int64
	PriviledgeType string
	Token          string
}

func (q *Queries) GetSessionTokens(ctx context.Context) ([]GetSessionTokensRow, error) {
	rows, err := q.db.QueryContext(ctx, getSessionTokens)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSessionTokensRow
	for rows.Next() {
		var i GetSessionTokensRow
		if err := rows.Scan(&i.ID, &i.PriviledgeType, &i.Token); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSimilarSessionTokens = `-- name: GetSimilarSessionTokens :many
;

SELECT account.id, account.priviledge_type, session.token FROM session
INNER JOIN account
ON account.id = session.account_id
WHERE session.token LIKE (?1) AND session.expiration_datetime>datetime('now')
`

type GetSimilarSessionTokensRow struct {
	ID             int64
	PriviledgeType string
	Token          string
}

func (q *Queries) GetSimilarSessionTokens(ctx context.Context, tokenBeginningWithWildcard string) ([]GetSimilarSessionTokensRow, error) {
	rows, err := q.db.QueryContext(ctx, getSimilarSessionTokens, tokenBeginningWithWildcard)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSimilarSessionTokensRow
	for rows.Next() {
		var i GetSimilarSessionTokensRow
		if err := rows.Scan(&i.ID, &i.PriviledgeType, &i.Token); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const publiclyUnaliveTokens = `-- name: PubliclyUnaliveTokens :exec
DELETE FROM session 
WHERE session.expiration_datetime <= datetime('now')
`

func (q *Queries) PubliclyUnaliveTokens(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, publiclyUnaliveTokens)
	return err
}

const unsafeCreateAccount = `-- name: UnsafeCreateAccount :one
INSERT INTO account 
	(email,password_hash, priviledge_type,last_updated) 
VALUES 
	(?,?,?,datetime('now')) 
RETURNING id, email, password_hash, priviledge_type, last_updated, family_id
`

type UnsafeCreateAccountParams struct {
	Email          string
	PasswordHash   string
	PriviledgeType string
}

func (q *Queries) UnsafeCreateAccount(ctx context.Context, arg UnsafeCreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, unsafeCreateAccount, arg.Email, arg.PasswordHash, arg.PriviledgeType)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.PriviledgeType,
		&i.LastUpdated,
		&i.FamilyID,
	)
	return i, err
}
