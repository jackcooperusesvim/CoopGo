// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: auth.sql

package sqlgen

import (
	"context"
	"database/sql"
)

const createSessionToken = `-- name: CreateSessionToken :one
INSERT INTO session (token,expiration_datetime,account_id) VALUES (?,?,?) RETURNING id, token, expiration_datetime, account_id
`

type CreateSessionTokenParams struct {
	Token              string
	ExpirationDatetime string
	AccountID          int64
}

func (q *Queries) CreateSessionToken(ctx context.Context, arg CreateSessionTokenParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSessionToken, arg.Token, arg.ExpirationDatetime, arg.AccountID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.ExpirationDatetime,
		&i.AccountID,
	)
	return i, err
}

const publiclyExecuteTokens = `-- name: PubliclyExecuteTokens :exec
DELETE FROM session 
WHERE session.expiration_datetime <= ?
`

func (q *Queries) PubliclyExecuteTokens(ctx context.Context, expirationDatetime string) error {
	_, err := q.db.ExecContext(ctx, publiclyExecuteTokens, expirationDatetime)
	return err
}

const unsafeCreateAccount = `-- name: UnsafeCreateAccount :one
INSERT INTO account (email,password_hash, priviledge_type,last_updated) VALUES (?,?,?,CURRENT_TIMESTAMP) RETURNING id, email, password_hash, priviledge_type, last_updated, family_id
`

type UnsafeCreateAccountParams struct {
	Email          string
	PasswordHash   string
	PriviledgeType string
}

func (q *Queries) UnsafeCreateAccount(ctx context.Context, arg UnsafeCreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, unsafeCreateAccount, arg.Email, arg.PasswordHash, arg.PriviledgeType)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.PriviledgeType,
		&i.LastUpdated,
		&i.FamilyID,
	)
	return i, err
}

const validateSessionToken = `-- name: ValidateSessionToken :one
SELECT account.id, account.priviledge_type FROM session
LEFT JOIN account
ON account.id = session.account_id
WHERE account.priviledge_type = ? AND session.token = ?
`

type ValidateSessionTokenParams struct {
	PriviledgeType string
	Token          string
}

type ValidateSessionTokenRow struct {
	ID             sql.NullInt64
	PriviledgeType sql.NullString
}

func (q *Queries) ValidateSessionToken(ctx context.Context, arg ValidateSessionTokenParams) (ValidateSessionTokenRow, error) {
	row := q.db.QueryRowContext(ctx, validateSessionToken, arg.PriviledgeType, arg.Token)
	var i ValidateSessionTokenRow
	err := row.Scan(&i.ID, &i.PriviledgeType)
	return i, err
}
