// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: course.sql

package sqlgen

import (
	"context"
)

const createCourse = `-- name: CreateCourse :one
INSERT INTO course (
	name,
	desc,
	start_date,
	end_date
) VALUES(
	?, ?, ?, ?
) RETURNING id, name, "desc", start_date, end_date
`

type CreateCourseParams struct {
	Name      string
	Desc      string
	StartDate string
	EndDate   string
}

func (q *Queries) CreateCourse(ctx context.Context, arg CreateCourseParams) (Course, error) {
	row := q.db.QueryRowContext(ctx, createCourse,
		arg.Name,
		arg.Desc,
		arg.StartDate,
		arg.EndDate,
	)
	var i Course
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Desc,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const deleteCourse = `-- name: DeleteCourse :exec
DELETE FROM course WHERE id = ?
`

func (q *Queries) DeleteCourse(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCourse, id)
	return err
}

const getCourse = `-- name: GetCourse :one
SELECT id, name, "desc", start_date, end_date FROM course 
WHERE id = ? LIMIT 1
`

func (q *Queries) GetCourse(ctx context.Context, id int64) (Course, error) {
	row := q.db.QueryRowContext(ctx, getCourse, id)
	var i Course
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Desc,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const listCourse = `-- name: ListCourse :many
SELECT id, name, "desc", start_date, end_date FROM course
`

func (q *Queries) ListCourse(ctx context.Context) ([]Course, error) {
	rows, err := q.db.QueryContext(ctx, listCourse)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Course
	for rows.Next() {
		var i Course
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Desc,
			&i.StartDate,
			&i.EndDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCourse = `-- name: UpdateCourse :one
UPDATE course
set name = ?, desc = ?, start_date = ?, end_date = ?
WHERE id = ?
RETURNING id, name, "desc", start_date, end_date
`

type UpdateCourseParams struct {
	Name      string
	Desc      string
	StartDate string
	EndDate   string
	ID        int64
}

func (q *Queries) UpdateCourse(ctx context.Context, arg UpdateCourseParams) (Course, error) {
	row := q.db.QueryRowContext(ctx, updateCourse,
		arg.Name,
		arg.Desc,
		arg.StartDate,
		arg.EndDate,
		arg.ID,
	)
	var i Course
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Desc,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}
