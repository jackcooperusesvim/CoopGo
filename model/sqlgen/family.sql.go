// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: family.sql

package sqlgen

import (
	"context"
	"database/sql"
)

const createFamily = `-- name: CreateFamily :one
INSERT INTO family(
	last_name,
	main_parent,
	sec_parent,
	phone1,
	phone2,
	phone3
) VALUES(?, ?, ?, ?, ?, ?) RETURNING id, last_name, main_parent, sec_parent, phone1, phone2, phone3
`

type CreateFamilyParams struct {
	LastName   string
	MainParent string
	SecParent  string
	Phone1     string
	Phone2     string
	Phone3     sql.NullString
}

func (q *Queries) CreateFamily(ctx context.Context, arg CreateFamilyParams) (Family, error) {
	row := q.db.QueryRowContext(ctx, createFamily,
		arg.LastName,
		arg.MainParent,
		arg.SecParent,
		arg.Phone1,
		arg.Phone2,
		arg.Phone3,
	)
	var i Family
	err := row.Scan(
		&i.ID,
		&i.LastName,
		&i.MainParent,
		&i.SecParent,
		&i.Phone1,
		&i.Phone2,
		&i.Phone3,
	)
	return i, err
}

const deleteFamily = `-- name: DeleteFamily :exec
DELETE FROM family WHERE id = ?
`

func (q *Queries) DeleteFamily(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteFamily, id)
	return err
}

const getFamilyMeta = `-- name: GetFamilyMeta :one
SELECT id, last_name, main_parent, sec_parent, phone1, phone2, phone3 FROM family 
WHERE id = ? LIMIT 1
`

func (q *Queries) GetFamilyMeta(ctx context.Context, id int64) (Family, error) {
	row := q.db.QueryRowContext(ctx, getFamilyMeta, id)
	var i Family
	err := row.Scan(
		&i.ID,
		&i.LastName,
		&i.MainParent,
		&i.SecParent,
		&i.Phone1,
		&i.Phone2,
		&i.Phone3,
	)
	return i, err
}

const listFamilies = `-- name: ListFamilies :many
SELECT id, last_name, main_parent, sec_parent, phone1, phone2, phone3 FROM family
`

func (q *Queries) ListFamilies(ctx context.Context) ([]Family, error) {
	rows, err := q.db.QueryContext(ctx, listFamilies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Family
	for rows.Next() {
		var i Family
		if err := rows.Scan(
			&i.ID,
			&i.LastName,
			&i.MainParent,
			&i.SecParent,
			&i.Phone1,
			&i.Phone2,
			&i.Phone3,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFamilyMeta = `-- name: UpdateFamilyMeta :one
UPDATE family
set last_name= ?, 
main_parent= ?, 
sec_parent= ?, 
phone1= ?,
phone2= ?,
phone3= ?
WHERE id = ?
RETURNING id, last_name, main_parent, sec_parent, phone1, phone2, phone3
`

type UpdateFamilyMetaParams struct {
	LastName   string
	MainParent string
	SecParent  string
	Phone1     string
	Phone2     string
	Phone3     sql.NullString
	ID         int64
}

func (q *Queries) UpdateFamilyMeta(ctx context.Context, arg UpdateFamilyMetaParams) (Family, error) {
	row := q.db.QueryRowContext(ctx, updateFamilyMeta,
		arg.LastName,
		arg.MainParent,
		arg.SecParent,
		arg.Phone1,
		arg.Phone2,
		arg.Phone3,
		arg.ID,
	)
	var i Family
	err := row.Scan(
		&i.ID,
		&i.LastName,
		&i.MainParent,
		&i.SecParent,
		&i.Phone1,
		&i.Phone2,
		&i.Phone3,
	)
	return i, err
}
